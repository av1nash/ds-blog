{
  
    
        "post0": {
            "title": "Parallel between SQL & Pandas",
            "content": "import pandas as pd . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; . SELECT . In SQL, SELECT is the operation which allows you to explore and manipulate data. . Select all columns . SELECT TOP 5 * FROM movies . df = pd.read_json(movies) # load movies data df.head() # Shows top 5 rows by default, you can pass a value asking more than 5 rows like so - df.head(10) . Title US Gross Worldwide Gross US DVD Sales Production Budget Release Date MPAA Rating Running Time min Distributor Source Major Genre Creative Type Director Rotten Tomatoes Rating IMDB Rating IMDB Votes . 0 The Land Girls | 146083.0 | 146083.0 | NaN | 8000000.0 | Jun 12 1998 | R | NaN | Gramercy | None | None | None | None | NaN | 6.1 | 1071.0 | . 1 First Love, Last Rites | 10876.0 | 10876.0 | NaN | 300000.0 | Aug 07 1998 | R | NaN | Strand | None | Drama | None | None | NaN | 6.9 | 207.0 | . 2 I Married a Strange Person | 203134.0 | 203134.0 | NaN | 250000.0 | Aug 28 1998 | None | NaN | Lionsgate | None | Comedy | None | None | NaN | 6.8 | 865.0 | . 3 Let&#39;s Talk About Sex | 373615.0 | 373615.0 | NaN | 300000.0 | Sep 11 1998 | None | NaN | Fine Line | None | Comedy | None | None | 13.0 | NaN | NaN | . 4 Slam | 1009819.0 | 1087521.0 | NaN | 1000000.0 | Oct 09 1998 | R | NaN | Trimark | Original Screenplay | Drama | Contemporary Fiction | None | 62.0 | 3.4 | 165.0 | . Select few columns . SELECT TOP 5 Title, [IMDB Rating] FROM movies . df[[&#39;Title&#39;,&#39;IMDB Rating&#39;]].head() . Title IMDB Rating . 0 The Land Girls | 6.1 | . 1 First Love, Last Rites | 6.9 | . 2 I Married a Strange Person | 6.8 | . 3 Let&#39;s Talk About Sex | NaN | . 4 Slam | 3.4 | . WHERE . SELECT * FROM movies WHERE [IMDB Rating] &gt; 5 . df[df[&#39;IMDB Rating&#39;] &gt; 5].head() . Title US Gross Worldwide Gross US DVD Sales Production Budget Release Date MPAA Rating Running Time min Distributor Source Major Genre Creative Type Director Rotten Tomatoes Rating IMDB Rating IMDB Votes . 0 The Land Girls | 146083.0 | 146083.0 | NaN | 8000000.0 | Jun 12 1998 | R | NaN | Gramercy | None | None | None | None | NaN | 6.1 | 1071.0 | . 1 First Love, Last Rites | 10876.0 | 10876.0 | NaN | 300000.0 | Aug 07 1998 | R | NaN | Strand | None | Drama | None | None | NaN | 6.9 | 207.0 | . 2 I Married a Strange Person | 203134.0 | 203134.0 | NaN | 250000.0 | Aug 28 1998 | None | NaN | Lionsgate | None | Comedy | None | None | NaN | 6.8 | 865.0 | . 6 Following | 44705.0 | 44705.0 | NaN | 6000.0 | Apr 04 1999 | R | NaN | Zeitgeist | None | None | None | Christopher Nolan | NaN | 7.7 | 15133.0 | . 8 Pirates | 1641825.0 | 6341825.0 | NaN | 40000000.0 | Jul 01 1986 | R | NaN | None | None | None | None | Roman Polanski | 25.0 | 5.8 | 3275.0 | . WHERE - Logical operator AND . SELECT * FROM movies WHERE [IMDB Rating] &gt; 5 AND [MPAA Rating] = &#39;PG&#39; . df[(df[&#39;IMDB Rating&#39;] &gt; 5) &amp; (df[&#39;MPAA Rating&#39;]==&#39;PG&#39;)].head() . Title US Gross Worldwide Gross US DVD Sales Production Budget Release Date MPAA Rating Running Time min Distributor Source Major Genre Creative Type Director Rotten Tomatoes Rating IMDB Rating IMDB Votes . 21 1776 | 0.0 | 0.0 | NaN | 4000000.0 | Nov 09 1972 | PG | NaN | Sony/Columbia | Based on Play | Drama | Historical Fiction | None | 57.0 | 7.0 | 4099.0 | . 59 The Adventures of Huck Finn | 24103594.0 | 24103594.0 | NaN | 6500000.0 | Apr 02 1993 | PG | NaN | Walt Disney Pictures | Based on Book/Short Story | Adventure | Historical Fiction | Stephen Sommers | 62.0 | 5.8 | 3095.0 | . 67 Around the World in 80 Days | 42000000.0 | 42000000.0 | NaN | 6000000.0 | Oct 17 1956 | PG | NaN | United Artists | Based on Book/Short Story | Adventure | None | None | 73.0 | 5.6 | 21516.0 | . 108 The Blue Butterfly | 1610194.0 | 1610194.0 | NaN | 10400000.0 | Feb 20 2004 | PG | NaN | Alliance | Original Screenplay | Drama | Contemporary Fiction | None | 44.0 | 6.2 | 817.0 | . 140 The Basket | 609042.0 | 609042.0 | NaN | 1300000.0 | May 05 2000 | PG | NaN | MGM | Original Screenplay | Drama | None | None | NaN | 6.3 | 343.0 | . WHERE - Logical operator OR . SELECT * FROM movies WHERE [MPAA Rating] = &quot;PG&quot; OR [MPAA Rating] = &quot;PG-13&quot; . df[(df[&#39;MPAA Rating&#39;] == &#39;PG&#39;) | (df[&#39;MPAA Rating&#39;] == &#39;PG-13&#39;)].head() . Title US Gross Worldwide Gross US DVD Sales Production Budget Release Date MPAA Rating Running Time min Distributor Source Major Genre Creative Type Director Rotten Tomatoes Rating IMDB Rating IMDB Votes . 21 1776 | 0.0 | 0.0 | NaN | 4000000.0 | Nov 09 1972 | PG | NaN | Sony/Columbia | Based on Play | Drama | Historical Fiction | None | 57.0 | 7.0 | 4099.0 | . 31 3 Ninjas Kick Back | 11744960.0 | 11744960.0 | NaN | 20000000.0 | May 06 1994 | PG | NaN | Walt Disney Pictures | Original Screenplay | Action | Contemporary Fiction | None | 17.0 | 3.2 | 3107.0 | . 41 The Abyss | 54243125.0 | 54243125.0 | NaN | 70000000.0 | Aug 09 1989 | PG-13 | NaN | 20th Century Fox | Original Screenplay | Action | Science Fiction | James Cameron | 88.0 | 7.6 | 51018.0 | . 43 Ace Ventura: Pet Detective | 72217396.0 | 107217396.0 | NaN | 12000000.0 | Feb 04 1994 | PG-13 | NaN | Warner Bros. | Original Screenplay | Comedy | Contemporary Fiction | Tom Shadyac | 49.0 | 6.6 | 63543.0 | . 44 Ace Ventura: When Nature Calls | 108360063.0 | 212400000.0 | NaN | 30000000.0 | Nov 10 1995 | PG-13 | NaN | Warner Bros. | Original Screenplay | Comedy | Contemporary Fiction | Steve Oedekerk | NaN | 5.6 | 51275.0 | . WHERE - Logical operator NOT . SELECT * FROM movies WHERE [Rotten Tomatoes Rating] IS NOT NULL . df[~df[&#39;Rotten Tomatoes Rating&#39;].isnull()].head() . Title US Gross Worldwide Gross US DVD Sales Production Budget Release Date MPAA Rating Running Time min Distributor Source Major Genre Creative Type Director Rotten Tomatoes Rating IMDB Rating IMDB Votes . 3 Let&#39;s Talk About Sex | 373615.0 | 373615.0 | NaN | 300000.0 | Sep 11 1998 | None | NaN | Fine Line | None | Comedy | None | None | 13.0 | NaN | NaN | . 4 Slam | 1009819.0 | 1087521.0 | NaN | 1000000.0 | Oct 09 1998 | R | NaN | Trimark | Original Screenplay | Drama | Contemporary Fiction | None | 62.0 | 3.4 | 165.0 | . 8 Pirates | 1641825.0 | 6341825.0 | NaN | 40000000.0 | Jul 01 1986 | R | NaN | None | None | None | None | Roman Polanski | 25.0 | 5.8 | 3275.0 | . 9 Duel in the Sun | 20400000.0 | 20400000.0 | NaN | 6000000.0 | Dec 31 2046 | None | NaN | None | None | None | None | None | 86.0 | 7.0 | 2906.0 | . 10 Tom Jones | 37600000.0 | 37600000.0 | NaN | 1000000.0 | Oct 07 1963 | None | NaN | None | None | None | None | None | 81.0 | 7.0 | 4035.0 | . GROUP BY . SELECT [Major Genre],COUNT(*) FROM movies ORDER BY 2 DESC . df.groupby(&#39;Major Genre&#39;).size().sort_values(0,ascending=False) . &lt;ipython-input-27-77301049b126&gt;:1: FutureWarning: In a future version of pandas all arguments of Series.sort_values will be keyword-only. df.groupby(&#39;Major Genre&#39;).size().sort_values(0,ascending=False) . Major Genre Drama 789 Comedy 675 Action 420 Adventure 274 Thriller/Suspense 239 Horror 219 Romantic Comedy 137 Musical 53 Documentary 43 Black Comedy 36 Western 36 Concert/Performance 5 dtype: int64 . JOIN . JOINS are probably one of the most important operation in SQL, it allows you to combine two or more tables and perform operations on resulting dataset . data = [[&#39;Slam&#39;,5],[&#39;Pirates&#39;,8],[&#39;Duel in the Sun&#39;,7]] df_favmovies = pd.DataFrame(data, columns=[&#39;my_fav_movies&#39;,&#39;my_rating&#39;]) . df_favmovies.head() . my_fav_movies my_rating . 0 Slam | 5 | . 1 Pirates | 8 | . 2 Duel in the Sun | 7 | . INNER JOIN . SELECT m1.*,m2.* FROM movies m1 INNER JOIN my_fav_movies m2 ON m1.Title = m2.my_fav_movies . pd.merge(df,df_favmovies, left_on=&#39;Title&#39;, right_on=&#39;my_fav_movies&#39;, how=&#39;inner&#39;) . Title US Gross Worldwide Gross US DVD Sales Production Budget Release Date MPAA Rating Running Time min Distributor Source Major Genre Creative Type Director Rotten Tomatoes Rating IMDB Rating IMDB Votes my_fav_movies my_rating . 0 Slam | 1009819.0 | 1087521.0 | NaN | 1000000.0 | Oct 09 1998 | R | NaN | Trimark | Original Screenplay | Drama | Contemporary Fiction | None | 62.0 | 3.4 | 165.0 | Slam | 5 | . 1 Pirates | 1641825.0 | 6341825.0 | NaN | 40000000.0 | Jul 01 1986 | R | NaN | None | None | None | None | Roman Polanski | 25.0 | 5.8 | 3275.0 | Pirates | 8 | . 2 Duel in the Sun | 20400000.0 | 20400000.0 | NaN | 6000000.0 | Dec 31 2046 | None | NaN | None | None | None | None | None | 86.0 | 7.0 | 2906.0 | Duel in the Sun | 7 | . LEFT OUTER JOIN . SELECT m1.*,m2.* FROM movies m1 LEFT OUTER JOIN my_fav_movies m2 ON m1.Title = m2.my_fav_movies . pd.merge(df,df_favmovies, left_on=&#39;Title&#39;, right_on=&#39;my_fav_movies&#39;, how=&#39;left&#39;).head() . Title US Gross Worldwide Gross US DVD Sales Production Budget Release Date MPAA Rating Running Time min Distributor Source Major Genre Creative Type Director Rotten Tomatoes Rating IMDB Rating IMDB Votes my_fav_movies my_rating . 0 The Land Girls | 146083.0 | 146083.0 | NaN | 8000000.0 | Jun 12 1998 | R | NaN | Gramercy | None | None | None | None | NaN | 6.1 | 1071.0 | NaN | NaN | . 1 First Love, Last Rites | 10876.0 | 10876.0 | NaN | 300000.0 | Aug 07 1998 | R | NaN | Strand | None | Drama | None | None | NaN | 6.9 | 207.0 | NaN | NaN | . 2 I Married a Strange Person | 203134.0 | 203134.0 | NaN | 250000.0 | Aug 28 1998 | None | NaN | Lionsgate | None | Comedy | None | None | NaN | 6.8 | 865.0 | NaN | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 373615.0 | NaN | 300000.0 | Sep 11 1998 | None | NaN | Fine Line | None | Comedy | None | None | 13.0 | NaN | NaN | NaN | NaN | . 4 Slam | 1009819.0 | 1087521.0 | NaN | 1000000.0 | Oct 09 1998 | R | NaN | Trimark | Original Screenplay | Drama | Contemporary Fiction | None | 62.0 | 3.4 | 165.0 | Slam | 5.0 | .",
            "url": "https://av1nash.github.io/ds-blog/pandas/sql/2022/02/26/pandas-basics.html",
            "relUrl": "/pandas/sql/2022/02/26/pandas-basics.html",
            "date": " • Feb 26, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://av1nash.github.io/ds-blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://av1nash.github.io/ds-blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "I build data products primarily on Azure platform. I have experience in: . Orchestrating data pipelines to pull data from myriads of data sources (SAAS platforms, On-prem databases, files) | Transforming data using python, sql &amp; dbt | Building semantic layer on a data warehouse for data consumption. | Applying DevOps practices to run all of the above in a highly scalable environment. | . I love solving challenging problems in this space and it will be my pleasure to help you think through an architecture problem, big picture perspective on a data program or simply a bug you can’t seem to find a solution for. Feel free to reach out to me on twitter (my dms are open) . Certifications .",
          "url": "https://av1nash.github.io/ds-blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://av1nash.github.io/ds-blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}